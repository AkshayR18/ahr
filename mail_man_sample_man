<?xml version="1.0" encoding="UTF-8"?>
<config
	xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="groovy">
		
<var-def name="properties_nop">
	<datastore name="ds_nop_config">
		<template>select * from @this</template>
	</datastore>
</var-def>	
	
<script><![CDATA[
	def NOP_CONFIGS = [:]
	properties_nop.getWrappedObject().toList().each { property ->
		NOP_CONFIGS.put(property.get("property_name").toString(), property.get("property_value").toString())
	}
	sys.defineVariable("NOP_CONFIGS", NOP_CONFIGS)
			
]]></script>	
	
	<script><![CDATA[ 

import java.time.*;
import java.io.*;
import java.nio.channels.FileChannel;
import org.apache.commons.lang.math.NumberUtils;
import org.apache.log4j.Logger;
import org.apache.poi.*;
import java.text.DecimalFormat;
import java.math.BigDecimal;
import java.math.MathContext;
import java.nio.file.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.*;
import java.util.*;
import org.apache.commons.io.comparator.LastModifiedFileComparator;
import java.time.temporal.ChronoUnit;
import static java.nio.file.StandardCopyOption.*;
import java.time.format.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import com.workfusion.studio.rpa.recorder.api.*
import com.workfusion.studio.rpa.recorder.api.types.*
import com.workfusion.studio.rpa.recorder.api.custom.*
import com.workfusion.studio.rpa.recorder.api.internal.representation.*
import com.workfusion.bot.exception.*
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException; 
import com.workfusion.studio.rpa.recorder.api.*;
import com.workfusion.studio.rpa.recorder.api.types.*;
import com.workfusion.studio.rpa.recorder.api.custom.*;
import com.workfusion.studio.rpa.recorder.api.internal.representation.*;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import com.workfusion.bot.exception.*;
import com.workfusion.rpa.helpers.*;
import java.util.*;

//String previous_day = "2020-08-27"
String previous_day = previous_working_day
		 
DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
LocalDate previous_working_day = LocalDate.parse(previous_day.toString(), formatter);
 
String local_date  = DateTimeFormatter.ofPattern("dd-MMM-yyyy").format(previous_working_day);
String[] b = local_date.split("-");
		 
final_day = b[0]
final_month = b[1]	      
final_year = b[2]	     	  
		 
String local_date_ddmmyy  = DateTimeFormatter.ofPattern("ddMMyy").format(previous_working_day);
String local_date_dd_mm_yy  = DateTimeFormatter.ofPattern("dd.MM.yy").format(previous_working_day);
String local_date_ddmmmyy  = DateTimeFormatter.ofPattern("ddMMMyy").format(previous_working_day);
String local_date_yymmdd  = DateTimeFormatter.ofPattern("yyMMdd").format(previous_working_day);	     
String month_num = local_date_ddmmyy.subSequence(2, 4);	     	  
 
LocalDate today = LocalDate.now();
String today_ddmmyyyy = DateTimeFormatter.ofPattern("ddMMyyyy").format(today);
		  
//String second_previous_day = "2020-08-26"
String second_previous_day = second_previous_working_day
 
DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
LocalDate second_previous_working_day = LocalDate.parse(second_previous_day.toString(), formatter1);

String local_date1  = DateTimeFormatter.ofPattern("dd-MMM-yyyy").format(second_previous_working_day);
String[] b1 = local_date1.split("-");
		 
final_day2 = b1[0]
final_month2 = b1[1]	      
final_year2 = b1[2]	     	  
		 
String local_date_ddmmyy2  = DateTimeFormatter.ofPattern("ddMMyy").format(second_previous_working_day);
String local_date_dd_mm_yy2  = DateTimeFormatter.ofPattern("dd.MM.yy").format(second_previous_working_day);
String local_date_ddmmmyy2  = DateTimeFormatter.ofPattern("ddMMMyy").format(second_previous_working_day);
String local_date_yymmdd2  = DateTimeFormatter.ofPattern("yyMMdd").format(second_previous_working_day);	     
String month_num2 = local_date_ddmmyy2.subSequence(2, 4);
 
String today_dd_mm_yyyy_dot = DateTimeFormatter.ofPattern("dd.MM.yyyy").format(previous_working_day);
log.debug("today_dd_mm_yyyy_dot : "+today_dd_mm_yyyy_dot);
sys.defineVariable("today_dd_mm_yyyy_dot", today_dd_mm_yyyy_dot)

String secondPreviousWD_ddmmyyyy_dot = DateTimeFormatter.ofPattern("dd.MM.yyyy").format(second_previous_working_day);
String previousWD_ddmmyyyy_dot = DateTimeFormatter.ofPattern("dd.MM.yyyy").format(previous_working_day);
String previousWD_ddmmyyyy = DateTimeFormatter.ofPattern("ddMMyyyy").format(previous_working_day);
		
String date_in_txt_file = DateTimeFormatter.ofPattern("dd/MM/yyyy").format(previous_working_day);
log.info("date_in_txt_file: "+date_in_txt_file);

String brains_file = NOP_CONFIGS.getWrappedObject().get("Market_NOP_Reconciliation_Onshore").toString()+"${final_year}//Robot_Data//${month_num} ${final_month}//${local_date_ddmmyy}//Import//brains.txt";

ArrayList<String> incorrect_date_file_list = new ArrayList<String>();

boolean incorrect_date_brains_file = false	
		try {
	      File myObj = new File(brains_file);
 	        String data = Files.readAllLines(Paths.get(brains_file)).get(1);
	        log.info("brains_file data: "+data);
				if(data.contains(date_in_txt_file)){
					log.info("brains_file Date OK.")
					incorrect_date_brains_file = false;
					//break;
				}
				else{
					log.info("Incorect date in file: "+myObj)
					incorrect_date_brains_file = true;
					log.info("incorrect_date_brains_file: "+incorrect_date_brains_file)
					//break;
				}


	    } catch (FileNotFoundException e) {
	       log.info("An error occurred.");
	      e.printStackTrace();
	    }
		
String fx_tran_mu_new_version_file = NOP_CONFIGS.getWrappedObject().get("Market_NOP_Reconciliation_Onshore").toString()+"${final_year}//Robot_Data//${month_num} ${final_month}//${local_date_ddmmyy}//Import//fx_tran_mu(new version).txt";

boolean incorrect_date_fx_tran_mu_new_version_file = false
		try {
	      File myObj_1 = new File(fx_tran_mu_new_version_file);
 	        String data_1 = Files.readAllLines(Paths.get(fx_tran_mu_new_version_file)).get(1);
	        log.info("fx_tran_mu_new_version_file data: "+data_1);
				if(data_1.contains(date_in_txt_file)){
					log.info("fx_tran_mu_new_version_file Date OK.")
					incorrect_date_fx_tran_mu_new_version_file = false;
					//break;
				}
				else{
					log.info("Incorect date in file: "+myObj_1)
					incorrect_date_fx_tran_mu_new_version_file = true;
					log.info("incorrect_date_fx_tran_mu_new_version_file: "+incorrect_date_fx_tran_mu_new_version_file)
					//break;
				}

	    } catch (FileNotFoundException e) {
	       log.info("An error occurred.");
	      e.printStackTrace();
	    }
		
	String fx_tran_mu_file = NOP_CONFIGS.getWrappedObject().get("Market_NOP_Reconciliation_Onshore").toString()+"${final_year}//Robot_Data//${month_num} ${final_month}//${local_date_ddmmyy}//Import//fx_tran_mu.txt";

	boolean incorrect_date_fx_tran_mu_file = false
			try {
			  File myObj_2 = new File(fx_tran_mu_file);
				String data_2 = Files.readAllLines(Paths.get(fx_tran_mu_file)).get(1);
				log.info("fx_tran_mu_file data: "+data_2);
				if(data_2.contains(date_in_txt_file)){
					log.info("fx_tran_mu_file Date OK.")
					incorrect_date_fx_tran_mu_file = false;
					//break;
				}
				else{
					log.info("Incorect date in file: "+myObj_2);				
					incorrect_date_fx_tran_mu_file = true;
					log.info("incorrect_date_fx_tran_mu_file: "+incorrect_date_fx_tran_mu_file);
					//break;
				}
			
  
			} catch (FileNotFoundException e) {
			   log.info("An error occurred.");
			  e.printStackTrace();
			}
			
	boolean	stop_and_send_mail = false;
	
	if(incorrect_date_brains_file == true){
		incorrect_date_file_list.add("- | brains |")
	}
	
	if(incorrect_date_fx_tran_mu_new_version_file == true){
		incorrect_date_file_list.add("- | fx_tran_mu(new version)|")
	}
	
	if(incorrect_date_fx_tran_mu_file == true){
		incorrect_date_file_list.add("- | fx_tran_mu |")
	}
		
	if(incorrect_date_brains_file == false && incorrect_date_fx_tran_mu_new_version_file == false && incorrect_date_fx_tran_mu_file == false){
		stop_and_send_mail = false;
		log.info("stop_and_send_mail: "+stop_and_send_mail)
		log.info("All dates are ok.");
	}
	else{
		stop_and_send_mail = true;
		log.info("stop_and_send_mail: "+stop_and_send_mail);
		log.info("Dates NOT ok.");
	}
            String mail_to = NOP_CONFIGS.getWrappedObject().get("mail_to").toString();
            String mail_cc = NOP_CONFIGS.getWrappedObject().get("mail_cc").toString();
            sys.defineVariable("mail_to", mail_to)
            sys.defineVariable("mail_cc", mail_cc)
	
	String incorrect_date_file_list_0 = incorrect_date_file_list[0]
	String incorrect_date_file_list_1 = incorrect_date_file_list[1]
	String incorrect_date_file_list_2 = incorrect_date_file_list[2]
	
	sys.defineVariable("stop_and_send_mail", stop_and_send_mail)
	sys.defineVariable("incorrect_date_file_list_0", incorrect_date_file_list_0)
	sys.defineVariable("incorrect_date_file_list_1", incorrect_date_file_list_1)
	sys.defineVariable("incorrect_date_file_list_2", incorrect_date_file_list_2)
	
	String greeting = "Dear All,"
	String mail_message = "Regards,"
	String mail_message2 = "PCG Bot"

	sys.defineVariable("mail_message", mail_message)
	sys.defineVariable("mail_message2", mail_message2)
	sys.defineVariable("greeting", greeting)
	
	]]></script>

	
	<case>
		<if condition = "${stop_and_send_mail}">
			<mail smtp-host="mail.absa.co.za"

					smtp-port="25"

					type="html"

					from = "MUPCGRobot@absa.africa"

					to = "${mail_to}"
			
					cc = "${mail_cc}"

					subject="Incorrect date" >

			<![CDATA[<p>]]>
				<var name="greeting"/>  
			<![CDATA[<br></p>]]>
			
				<![CDATA[<p>]]>
				The date is incorrect in the following files:
				<![CDATA[<br>]]>
					<var name="incorrect_date_file_list_0"/>  
				<![CDATA[<br>]]>
					<var name="incorrect_date_file_list_1"/>  
				<![CDATA[<br>]]>
					<var name="incorrect_date_file_list_2"/>  
				<![CDATA[<br></p>]]>
				
			<![CDATA[<p>]]>
				<var name="mail_message"/>  
			<![CDATA[<br></p>]]>
								
			<![CDATA[<p>]]>  
				<var name="mail_message2"/>   
			<![CDATA[</p>]]> 

			</mail>
		</if>
	</case>	
	
<export include-original-data="true">
	<single-column name="stop_and_send_mail" value="${stop_and_send_mail}"></single-column>	
</export>

</config>
