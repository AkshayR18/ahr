<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config" scriptlang="groovy">

	<script><![CDATA[ 

	import java.io.File;
	import java.io.FileOutputStream;
	import java.io.FileReader;
	import java.io.IOException;
	import java.nio.file.*;
	import org.apache.poi.ss.usermodel.*;
	import org.apache.poi.ss.util.*;
	import org.apache.poi.xssf.usermodel.*;
	import java.time.*;
	import org.apache.commons.io.comparator.LastModifiedFileComparator;	
	import com.workfusion.rpa.helpers.resources.Filter;
	import java.time.temporal.ChronoUnit;
	import java.util.Date;
	import java.util.Calendar;
	import java.text.SimpleDateFormat;
	import java.sql.Timestamp;
	import java.time.OffsetDateTime;
	import java.time.ZoneOffset;
	import java.time.LocalDate;
	import java.time.DayOfWeek;
	import java.time.format.DateTimeFormatter;
	import java.time.temporal.ChronoField;
    import org.apache.poi.ss.SpreadsheetVersion;
    import org.apache.poi.ss.usermodel.Cell;
    import org.apache.poi.ss.usermodel.CellCopyPolicy;
	import org.apache.poi.xssf.usermodel.XSSFCell;
    import org.apache.poi.ss.usermodel.Sheet;
    import org.apache.poi.ss.util.AreaReference;
    import org.apache.poi.ss.util.CellRangeAddress;
    import org.apache.poi.xssf.usermodel.XSSFSheet;
    import org.apache.poi.xssf.usermodel.XSSFTable;
    import org.apache.poi.xssf.usermodel.XSSFWorkbook;
    import com.workfusion.rpa.helpers.Excel;
    import org.apache.poi.xssf.*;
    import org.apache.poi.ss.usermodel.WorkbookFactory
    import org.apache.poi.ss.usermodel.Workbook 
    import org.apache.poi.ss.usermodel.Row
    import org.apache.poi.ss.usermodel.Row.MissingCellPolicy
    import org.apache.poi.ss.usermodel.CellType
    import org.apache.commons.lang.math.NumberUtils;
    import org.openqa.selenium.By
    import org.openqa.selenium.By.ByXPath
    import com.workfusion.rpa.helpers.selectors.ByText
    import com.google.gson.Gson;
    import org.apache.poi.ss.usermodel.CreationHelper;
    import org.apache.poi.ss.usermodel.FormulaEvaluator;	
	import com.workfusion.studio.rpa.recorder.api.*
	import com.workfusion.studio.rpa.recorder.api.types.*
	import com.workfusion.studio.rpa.recorder.api.custom.*
	import com.workfusion.studio.rpa.recorder.api.internal.representation.*
	import com.workfusion.bot.exception.*    	   
	import java.io.BufferedWriter;
	import java.io.OutputStreamWriter;
	import java.io.Writer;
	import java.nio.file.FileSystem;
	import java.nio.file.FileSystems;
	import java.nio.file.Files;
	import java.nio.file.Path;
	import java.nio.file.StandardCopyOption;
	import org.apache.commons.lang3.time.DateUtils;
	
	String username = System.getProperty("user.name");
	log.info("User: "+username);
	
	String bobo_file_path = "C:\\Users\\"+username+"\\Downloads\\bobo report\\Domestic BOBO 20200813 - xxx.xlsm"
	
	FileInputStream input = new FileInputStream(bobo_file_path.toString());
	XSSFWorkbook wb = new XSSFWorkbook(input);
	XSSFSheet suspense_sheet = wb.getSheet("Suspense");
	XSSFSheet is_sheet = wb.getSheet("IS");
	XSSFSheet bs_sheet = wb.getSheet("BS");
	
	int numOfRows = suspense_sheet.getLastRowNum()-1; //number of rows below column names
	int numOfRows2 = is_sheet.getLastRowNum()-1;
	System.out.println("Number of records(suspense): "+numOfRows);
	System.out.println("Number of records(is): "+numOfRows2);

	for (int rowIndex = 1; rowIndex <= bs_sheet.getLastRowNum(); rowIndex++){
		try{
		String product = bs_sheet.getRow(rowIndex).getCell(0,Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
		double difference = bs_sheet.getRow(rowIndex).getCell(18).getNumericCellValue();
		XSSFRow bs_row = bs_sheet.getRow(rowIndex);
			if(product != null){
				log.info("Product: "+product+" | Difference: "+difference);
				if(difference == 0.0){
					bs_row.setZeroHeight(false);
					log.info("Hidden");
				}
			}

		}
		catch(Exception e){
		log.info("Error occured while hiding rows in BS sheet.");
		}
	}

	for (int rowIndex = 1; rowIndex <= suspense_sheet.getLastRowNum(); rowIndex++){
		try{
		String area = suspense_sheet.getRow(rowIndex).getCell(0,Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
		double difference = suspense_sheet.getRow(rowIndex).getCell(17).getNumericCellValue();
		XSSFRow suspense_row = suspense_sheet.getRow(rowIndex);
			if(area != null){
				log.info("Area: "+area+" | Difference: "+difference);
				if(difference == 0.0){
					suspense_row.setZeroHeight(false);
					log.info("Hidden");					
				}
			}

		}
		catch(Exception e){
		log.info("Error occured while hiding rows in Suspense sheet.");
		} 	
	}
	
	for (int rowIndex2 = 1; rowIndex2 <= is_sheet.getLastRowNum(); rowIndex2++){
		try{
		double difference_is = is_sheet.getRow(rowIndex2).getCell(22).getNumericCellValue();
		XSSFRow is_row = is_sheet.getRow(rowIndex2);
		
			if(difference_is == 0.0){
				is_row.setZeroHeight(false);
				log.info("Hidden");					
			}	
		}
		catch(Exception e){
			log.info("Error occured while hiding rows in IS sheet.");
		}
	}
	
	OutputStream fileOut = new FileOutputStream(bobo_file_path.toString());		
	wb.write(fileOut);
	wb.close();
	
		]]></script>

    <export include-original-data="true">

	</export>

</config>